<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Victor Alves</title>
    <link>/posts/index.xml</link>
    <description>Recent content in Posts on Victor Alves</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sat, 23 Jan 2016 04:49:23 -0200</lastBuildDate>
    <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ruby on Rails development environment with Docker</title>
      <link>/posts/ruby-on-rails-development-environment-with-docker/</link>
      <pubDate>Sat, 23 Jan 2016 04:49:23 -0200</pubDate>
      
      <guid>/posts/ruby-on-rails-development-environment-with-docker/</guid>
      <description>

&lt;h1 id=&#34;learning-ruby-and-rails&#34;&gt;Learning Ruby and Rails&lt;/h1&gt;

&lt;p&gt;This was how I created my first project to learn more about Ruby and Rails, I decided to create a web application for photo gallery. For starter, I wanted to keep my dev env isolated and more controlled, reason why I opt to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;, I had it already installed, as well as &lt;a href=&#34;https://www.ruby-lang.org/&#34;&gt;Ruby&lt;/a&gt; and &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Rails&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I created the new project with &lt;code&gt;rails new --skip-bundle gallery&lt;/code&gt; on my workstation, used &lt;code&gt;--skip-bundle&lt;/code&gt; because I&amp;rsquo;m going to install all Gems in the container, it added all the files and folder I needed to start my Rails project, then I added everything into a Git repository, just to keep track of my steps.&lt;/p&gt;

&lt;p&gt;To start the Docker container setup, I&amp;rsquo;ve Added a new file called &lt;code&gt;Dockerfile&lt;/code&gt;. Thanks &lt;a href=&#34;https://blog.codeship.com/running-rails-development-environment-docker/&#34;&gt;Marko Locher&amp;rsquo;s&lt;/a&gt; article for the kickstart, here is its content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM ruby:2.3

# Install apt based dependencies required to run Rails as
# well as RubyGems. As the Ruby image itself is based on a
# Debian image, we use apt-get to install those.
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
  build-essential \
  patch \
  ruby-dev \
  zlib1g-dev \
  liblzma-dev \
  nodejs

# Configure the main working directory. This is the base
# directory used in any further RUN, COPY, and ENTRYPOINT
# commands.
RUN mkdir -p /app
WORKDIR /app

# Copy the Gemfile as well as the Gemfile.lock and install
# the RubyGems. This is a separate step so the dependencies
# will be cached unless changes to one of those two files
# are made.
COPY Gemfile ./
RUN gem install bundler &amp;amp;&amp;amp; bundle install --jobs 20 --retry 5

# Copy the main application.
COPY . ./

# Expose port 3000 to the Docker host, so we can access it
# from the outside.
EXPOSE 3000

# Configure an entry point, so we don&#39;t need to specify
# &amp;quot;bundle exec&amp;quot; for each of our commands.
ENTRYPOINT [&amp;quot;bundle&amp;quot;, &amp;quot;exec&amp;quot;]

# The main command to run when the container starts. Also
# tell the Rails dev server to bind to all interfaces by
# default.
CMD [&amp;quot;bundle&amp;quot;, &amp;quot;exec&amp;quot;, &amp;quot;rails&amp;quot;, &amp;quot;server&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;0.0.0.0&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then built the image with &lt;code&gt;docker build -t gallery .&lt;/code&gt; and then start the app container with &lt;code&gt;docker run -d --name gallery -v &amp;quot;$PWD&amp;quot;:/app -p 8080:3000 gallery&lt;/code&gt; if you check your browser on your container&amp;rsquo;s address and port 8080, mine look like this &lt;code&gt;http://192.168.99.100:8080/&lt;/code&gt;, then you should be able to see Rails welcome page.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-command-dockerrun-i-ve-been-using&#34;&gt;What is the command Dockerrun I&amp;rsquo;ve been using&lt;/h2&gt;

&lt;p&gt;Now every time I want to run any rails command, I&amp;rsquo;m going to use Docker, it will look something like this &lt;code&gt;docker run --rm -v &amp;quot;$PWD&amp;quot;:/app gallery rails g controller Albums index&lt;/code&gt; to make things easier for me in the console, I created an alias in my &lt;code&gt;~/.bash_profile&lt;/code&gt; with the following command &lt;code&gt;alias dockerrun=&#39;docker run --rm -v &amp;quot;$PWD&amp;quot;:/app&#39;&lt;/code&gt; so now I can do this &lt;code&gt;dockerrun gallery rails g controller Albums index&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I made a static photo gallery for Hugo</title>
      <link>/posts/how-i-made-a-static-photo-gallery-for-hugo/</link>
      <pubDate>Wed, 20 Jan 2016 07:25:15 -0200</pubDate>
      
      <guid>/posts/how-i-made-a-static-photo-gallery-for-hugo/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;updated:&lt;/strong&gt; I&amp;rsquo;ve named this project &lt;a href=&#34;https://github.com/vhugo/hugallery&#34;&gt;Hugallery&lt;/a&gt; and I share and maintain its code at Github, if you&amp;rsquo;re interested go check it out. Also the &lt;code&gt;README.md&lt;/code&gt; file looks way better and up-to-date than this articles.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;goal&#34;&gt;Goal&lt;/h2&gt;

&lt;p&gt;Create a command-line program that generate a static web photo gallery based on a given directory with raw photos files.&lt;/p&gt;

&lt;h2 id=&#34;planning&#34;&gt;Planning&lt;/h2&gt;

&lt;p&gt;Things I want to accomplish in this project:
- It must be easy to install and use;
- It must be easy to configure and define or modify the gallery structure;
- It must be reusable for existing galleries;
- It should create file compatible with &lt;a href=&#34;https://gohugo.io/&#34;&gt;HUGO&lt;/a&gt; standards;&lt;/p&gt;

&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;

&lt;p&gt;Each album should have 2 configuration file &lt;code&gt;album.json&lt;/code&gt; and &lt;code&gt;photos.csv&lt;/code&gt; formatted as JSON. If configuration files were not created, program will create them as template and give the instruction to update the files before running the program again.&lt;/p&gt;

&lt;h3 id=&#34;album-configuration-file-album-cfg&#34;&gt;Album Configuration file: album.cfg&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;gallery_location&lt;/code&gt; (string) : Where do I put this?
&lt;code&gt;album_name&lt;/code&gt; (string) : What do I call it?
&lt;code&gt;parent_path&lt;/code&gt; (string) : Does it have a parent?  &lt;em&gt;remember to check if parent in the cfg file really exists&lt;/em&gt;
&lt;code&gt;thumbnail_max_height&lt;/code&gt; (integer): How tall should the thumbnail be?
&lt;code&gt;thumbnail_max_width&lt;/code&gt; (integer): How wide should the thumbnail be?&lt;/p&gt;

&lt;h3 id=&#34;album-configuration-file-photos-cfg&#34;&gt;Album Configuration file: photos.cfg&lt;/h3&gt;

&lt;p&gt;In this file, the &lt;code&gt;order&lt;/code&gt; of the elements/photos in the array will represent its order in the album page.
&lt;code&gt;photos&lt;/code&gt; (array) : List of images
&lt;code&gt;photos.title&lt;/code&gt; (string) : Name of a given image
&lt;code&gt;photos.description&lt;/code&gt; (string) : Description  of a given image&lt;/p&gt;

&lt;h2 id=&#34;figure-stuff-out&#34;&gt;Figure stuff out&lt;/h2&gt;

&lt;p&gt;This is a compilation of research I did for this project before work began.&lt;/p&gt;

&lt;h3 id=&#34;how-to-create-a-cli-python-tool&#34;&gt;How to create a CLI Python tool&lt;/h3&gt;

&lt;p&gt;Decide to use &lt;a href=&#34;https://docs.python.org/2/library/argparse.html#usage&#34;&gt;argparse&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;how-to-resize-images&#34;&gt;How to resize images&lt;/h3&gt;

&lt;p&gt;This will show how to resize images using the command-line. I&amp;rsquo;ve used ImageMagick long time ago, going to use it again.&lt;/p&gt;

&lt;h4 id=&#34;installing-imagemagick-on-mac-os-x&#34;&gt;Installing ImageMagick on Mac OS X&lt;/h4&gt;

&lt;p&gt;Using &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; on Mac OS X Yosemite 10.10.5 (14F1509):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# brew install ImageMagick
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;==&amp;gt; Installing dependencies for imagemagick: libtool, libpng, libtiff, freetype
==&amp;gt; Installing imagemagick dependency: libtool
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/libtool-2.4.6.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring libtool-2.4.6.yosemite.bottle.tar.gz
==&amp;gt; Caveats
In order to prevent conflicts with Apple&#39;s own libtool we have prepended a &amp;quot;g&amp;quot;
so, you have instead: glibtool and glibtoolize.
==&amp;gt; Summary
üç∫  /usr/local/Cellar/libtool/2.4.6: 127 files, 4.0M
==&amp;gt; Installing imagemagick dependency: libpng
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/libpng-1.6.18.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring libpng-1.6.18.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/libpng/1.6.18: 17 files, 1.2M
==&amp;gt; Installing imagemagick dependency: libtiff
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/libtiff-4.0.6.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring libtiff-4.0.6.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/libtiff/4.0.6: 259 files, 3.9M
==&amp;gt; Installing imagemagick dependency: freetype
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/freetype-2.6_1.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring freetype-2.6_1.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/freetype/2.6_1: 60 files, 2.6M
==&amp;gt; Installing imagemagick
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/imagemagick-6.9.1-10.yosemite.bottle.tar.gz
######################################################################## 100.0%
==&amp;gt; Pouring imagemagick-6.9.1-10.yosemite.bottle.tar.gz
üç∫  /usr/local/Cellar/imagemagick/6.9.1-10: 1447 files, 22M
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To test I ran the following commands&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# convert logo: logo.gif
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and  then&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# identify logo.gif
logo.gif GIF 640x480 640x480+0+0 8-bit sRGB 256c 28.6KB 0.000u 0:00.000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;the command &lt;code&gt;display&lt;/code&gt; didn&amp;rsquo;t work for me, but I don&amp;rsquo;t think I&amp;rsquo;m going to need it for now, but to see the image you can type &lt;code&gt;open logo.gif&lt;/code&gt; it should open mac&amp;rsquo;s preview.&lt;/p&gt;

&lt;h4 id=&#34;converting-and-resize-images&#34;&gt;Converting and resize images&lt;/h4&gt;

&lt;p&gt;Since this project is a &lt;strong&gt;photo&lt;/strong&gt; gallery I&amp;rsquo;ll assume all file should be converted to &lt;em&gt;JPEG&lt;/em&gt;. Here is the first test for convert and resize an image. Downloaded this cool image from &lt;a href=&#34;https://www.pexels.com/photo/forest-hiking-trees-15286/&#34;&gt;Pexels&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget -nd &amp;quot;https://static.pexels.com/photos/15286/pexels-photo.jpg&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Found this cool &lt;a href=&#34;http://www.cyberciti.biz/tips/howto-linux-creating-a-image-thumbnails-from-shell-prompt.html&#34;&gt;article&lt;/a&gt; which shows how to use a nice feature ImageMagick has that create smaller images from original, the following test will create a image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# convert -thumbnail 200 pexels-photo.jpg pexels-photo-thumb.jpg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It worked!&lt;/p&gt;

&lt;p&gt;Found a cool pypi package called &lt;a href=&#34;http://docs.wand-py.org/en/0.4.2/&#34;&gt;Wand&lt;/a&gt;  did the following test it so easy:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lineno&#34;&gt; 1 &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#!/usr/local/bin/python&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 2 &lt;/span&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;wand.image&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 3 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 4 &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# mostly for an even crop measure&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 5 &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Image&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;pexels-photo.jpg&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 6 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 7 &lt;/span&gt;	&lt;span class=&#34;c&#34;&gt;# look for the small measure to set as min_size&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 8 &lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt; 9 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;10 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;11 &lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;12 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;13 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;14 &lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;15 &lt;/span&gt;	&lt;span class=&#34;c&#34;&gt;# Clone the original image to create cropped file&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;16 &lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;img&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;17 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;18 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;crop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;min_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c&#34;&gt;# Perfect crop ;-)&lt;/span&gt;
&lt;span class=&#34;lineno&#34;&gt;19 &lt;/span&gt;		&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;save&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;pexels-photo-thumbtest.jpg&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;p&gt;requirements
- &lt;a href=&#34;http://docs.wand-py.org/en/0.4.2/&#34;&gt;Wand&lt;/a&gt;
- &lt;a href=&#34;www.imagemagick.org&#34;&gt;ImageMagick&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;This is how end user should use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# genstaphotogal
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ideas-for-improvement&#34;&gt;Ideas for improvement&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Make it more interactive&lt;/li&gt;
&lt;li&gt;Optimize: Check if files exists before trying to create crops and resize (maybe check sizes)&lt;/li&gt;
&lt;li&gt;Make better way to select cover&lt;/li&gt;
&lt;li&gt;Make better tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;write-repeatable-instructions-to-use-it&#34;&gt;Write repeatable instructions to use it&lt;/h2&gt;

&lt;p&gt;I wrote the &lt;a href=&#34;https://github.com/vhugo/hugallery/blob/master/README.md&#34;&gt;README&lt;/a&gt; file with more insights and instructions on how to install and use.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimenting with Hugo</title>
      <link>/posts/experimenting-with-hugo/</link>
      <pubDate>Sat, 16 Jan 2016 15:53:26 -0200</pubDate>
      
      <guid>/posts/experimenting-with-hugo/</guid>
      <description>

&lt;h1 id=&#34;experimenting-with-hugo&#34;&gt;Experimenting with Hugo&lt;/h1&gt;

&lt;p&gt;This is my first post and I&amp;rsquo;m going to talk about how I created the site. Last time I decided to create anything like a blog it was 1999. I&amp;rsquo;m used to work with dynamic webpages with database access upon request, since 1999 websites development has changed from static files only to dynamic webpages and now it&amp;rsquo;s coming back to static file again, to improve user experience by being as fast as it can possibly be. The difference from 1999&amp;rsquo;s website development, now a days we have tools to dynamically create static files and that&amp;rsquo;s what &lt;a href=&#34;//gohugo.oi/&#34;&gt;Hugo&lt;/a&gt; does. There are many other tools like Hugo, a popular choice is &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyllrb&lt;/a&gt;, I choose Hugo because it seemed simple and fast enough.&lt;/p&gt;

&lt;p&gt;In case you want to see the original files I&amp;rsquo;m currently using for this experiment, I created a &lt;a href=&#34;https://github.com/vhugo/vhugo.github.io-hugosrc&#34;&gt;Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;quickstart&#34;&gt;QuickStart&lt;/h2&gt;

&lt;p&gt;Hugo has a good &lt;a href=&#34;http://www.gohugo.io/overview/introduction/&#34;&gt;documentation&lt;/a&gt;, in the &lt;a href=&#34;http://www.gohugo.io/overview/quickstart/&#34;&gt;quickstart section&lt;/a&gt; you can create a website under 2 minutes.&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/w7Ft2ymGmfc&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;If you watch this video will know the basics to get started.&lt;/p&gt;

&lt;h2 id=&#34;themes-and-layouts-files&#34;&gt;Themes and layouts files&lt;/h2&gt;

&lt;p&gt;After the quickstart, I knew how to create site, add content and create site files, just needed to find a theme I like and start writing content. I wanted something clean and simple, so after looking at most of themes in &lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Theme Showcase&lt;/a&gt; I found &lt;a href=&#34;http://themes.gohugo.io/cocoa/&#34;&gt;Cocoa&lt;/a&gt; developed by &lt;a href=&#34;https://github.com/nishanths&#34;&gt;Nishanth Shanmugham&lt;/a&gt;. To install it I just clone the repository into themes directory in the project root directory. It looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd project-root-dir
git clone https://github.com/nishanths/cocoa-hugo-theme.git themes/cocoa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Even though the theme is good, I still wanted to make some changes without touching the original source, so I added some new files into &lt;a href=&#34;https://github.com/vhugo/vhugo.github.io-hugosrc/tree/master/layouts&#34;&gt;layouts folder&lt;/a&gt;  which is used instead of the ones in the theme.&lt;/p&gt;

&lt;h2 id=&#34;github-pages&#34;&gt;Github Pages&lt;/h2&gt;

&lt;p&gt;I publish the site using Github, I just created a new repo called &lt;code&gt;vhugo.github.io&lt;/code&gt; and push all files from my Hugo project&amp;rsquo;s public folder. if you want to know more about this check &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;editors-for-code-and-markdown-content&#34;&gt;Editors for code and markdown content&lt;/h2&gt;

&lt;p&gt;As a developer I love text editors of all kind, but don&amp;rsquo;t like fancy IDEs as much. For years I used &lt;a href=&#34;https://macromates.com/&#34;&gt;TextMate&lt;/a&gt; and when &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt; showed up and I felt the need to switch editors, been using it ever since. There&amp;rsquo;s a new editor emerging from the GitHub team called &lt;a href=&#34;https://atom.io&#34;&gt;Atom&lt;/a&gt;, still miss a lot of packages that I&amp;rsquo;m used to on SublimeText, but it looks promising. SublimeText has some packages to help edit markdown, but I found a MarkDown editor called &lt;a href=&#34;http://writed.io/&#34;&gt;Writed&lt;/a&gt;, loved it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>